from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command, CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from generate_password import generate_password_logic


router = Router()
password_settings = {}


class PasswrodState(StatesGroup):
    length = State()
    digits = State()
    letters = State()
    special_characters = State()


@router.message(CommandStart())
async def start(message: Message):
    keybord = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å"), KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∞—Ä–æ–ª—è")],
            [KeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏"), KeyboardButton(text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"

        "–Ø ‚Äî –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π. üîê\n"
        "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å:\n"

        "- –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.\n"
        "- –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Ä–æ–ª—è: –¥–ª–∏–Ω—É, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥—Ä.\n"
        "- –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.\n"
        "- –£–∑–Ω–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n\n"

        "üí° –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "- **/generate** ‚Äî –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∞—Ä–æ–ª—è.\n"
        "- **/settings** ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n"
        "- **/saved** ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏.\n"
        "- **/help** ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å.\n"
        "–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —Ç–≤–æ–∏ –ø–∞—Ä–æ–ª–∏ –Ω–∞–¥–µ–∂–Ω–µ–µ! üöÄ"
                         
    , parse_mode="Markdown", reply_markup=keybord)


@router.message(lambda message: message.text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å" or message.text == "/generate")
async def generate(message: Message, state: FSMContext):
    keybord = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="save")]
    ])

    user_data = await state.get_data()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —É—Å—Ç–∞–Ω–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    length = password_settings.get("length", 12)
    digits = password_settings.get("digits", True)
    letters = password_settings.get("letters", True)
    specials = password_settings.get("special_characters", True)

    password = generate_password_logic(length, digits, letters, specials)
    await message.answer(f"–í–∞—à –ø–∞—Ä–æ–ª—å: {password}", reply_markup=keybord)


@router.message(lambda message: message.text == "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∞—Ä–æ–ª—è")
async def configure_password(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12):")
    await state.set_state(PasswrodState.length)


@router.message(PasswrodState.length)
async def set_length(message: Message, state: FSMContext):
    await state.update_data(length=int(message.text))
    await message.answer("–í–∫–ª—é—á–∞—Ç—å —Ü–∏—Ñ—Ä—ã? (–¥–∞/–Ω–µ—Ç):")
    await state.set_state(PasswrodState.digits)


@router.message(PasswrodState.digits)
async def set_digits(message: Message, state: FSMContext):
    include_digits = message.text.lower() in ["–¥–∞", "yes"]
    await state.update_data(digits=include_digits)
    await message.answer("–í–∫–ª—é—á–∞—Ç—å –±—É–∫–≤—ã? (–¥–∞/–Ω–µ—Ç):")
    await state.set_state(PasswrodState.letters)


@router.message(PasswrodState.letters)
async def set_letters(message: Message, state: FSMContext):
    include_letters = message.text.lower() in ["–¥–∞", "yes"]
    await state.update_data(letters=include_letters)
    await message.answer("–í–∫–ª—é—á–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã? (–¥–∞/–Ω–µ—Ç):")
    await state.set_state(PasswrodState.special_characters)


@router.message(PasswrodState.special_characters)
async def save_custom_settings(message: Message, state: FSMContext):
    include_specials = message.text.lower() in ["–¥–∞", "yes"]
    await state.update_data(special_characters=include_specials)
    settings = await state.get_data()
    password_settings['length'] = settings.get("length", 12)
    password_settings['digits'] = settings.get("digits", True)
    password_settings['letters'] = settings.get("letters", True)
    password_settings['special_characters'] = settings.get("special_characters", True)
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í—ã –º–æ–∂–µ—Ç–µ —Ç–µ–ø–µ—Ä—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å.")
    await state.clear()


@router.message(lambda message: message.text == "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏" or message.text == "/help")
async def help(message: Message):
    help_text = """
    üîí **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–∞–¥–µ–∂–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π**

    1. **–î–ª–∏–Ω–∞ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ**:
    –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 12 —Å–∏–º–≤–æ–ª–æ–≤. –ß–µ–º –¥–ª–∏–Ω–Ω–µ–µ, —Ç–µ–º –ª—É—á—à–µ.

    2. **–°–º–µ—à–∏–≤–∞–π—Ç–µ —Å–∏–º–≤–æ–ª—ã**:
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã (–∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ), —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (`!@#$%^&*`).

    3. **–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é**:
    –ò–∑–±–µ–≥–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏, –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ª–µ–≥–∫–æ —É–≥–∞–¥—ã–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    4. **–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è**:
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –≤–∑–ª–æ–º –≤—Å–µ—Ö –≤–∞—à–∏—Ö —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π, –µ—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –ø–∞—Ä–æ–ª–µ–π –±—É–¥–µ—Ç —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω.

    5. **–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä–æ–ª–∏**:
    –ò–∑–±–µ–≥–∞–π—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –≤—Ä–æ–¥–µ `123456`, `password`, `qwerty` –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã—Ö.

    6. **–†–µ–≥—É–ª—è—Ä–Ω–∞—è —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª–µ–π**:
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –ø–∞—Ä–æ–ª–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.

    7. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π**:
    –•—Ä–∞–Ω–∏—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –≤ –Ω–∞–¥–µ–∂–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏—Ö –≤—Ä—É—á–Ω—É—é.

    8. **–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (2FA)**:
    –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–π—Ç–µ 2FA —Ç–∞–º, –≥–¥–µ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ, –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã.
    """
    await message.answer(help_text, parse_mode="Markdown")
